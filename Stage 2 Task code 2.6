# HackBio Internship - February 2025
# Team Arginine Python 
# This team has four members, viz:
# Abby (GitHub: @AbbyOlawal)
# Oluwaferanmi (GitHub: @oluwaferanmihq)
# Olumide (GitHub: @inyang352)
# Prashant (GitHub: @PrashantPhulpagar)
# Abby (GitHub: @AbbyOlawal) https://www.linkedin.com/in/abigael-edeh-b1a7a015a/
# Oluwaferanmi (GitHub: @oluwaferanmihq) https://www.linkedin.com/in/oluwaferanmiatolagbe/
# Olumide (GitHub: @inyang352) https://www.linkedin.com/in/olumide-inyang-73b224a1/
# Prashant (GitHub: @PrashantPhulpagar) https://www.linkedin.com/in/prashant-phulpagar-0025417a?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app
# GitHub link to team_arginine_python repository for stage 2
https://github.com/AbbyOlawal/Hackbio-biocoding-Internship/edit/main/Stage%202%20Task%20code%202.6
#link to the task videos
https://drive.google.com/file/d/1OzWlZ8SO5DJhzhWRv-Kmzgb5CF8n0xk7/view?usp=drivesdk


import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


# Load dataset from the URL with space as the separator
data_source = "https://gist.githubusercontent.com/stephenturner/806e31fce55a8b7175af/raw/1a507c4c3f9f1baaa3a69187223ff3d3050628d4/results.txt"
df = pd.read_csv(data_source, sep=" ", engine="python")

# Clean column names (strip spaces)
df.columns = df.columns.str.strip()

# Identify the correct p-value column
pval_col = 'pvalue' if 'pvalue' in df.columns else 'padj'

# Remove rows with missing values in critical columns
df = df[['log2FoldChange', pval_col]].dropna()

# Compute -log10(p-value) for visualization
df["-log10(p-value)"] = -np.log10(df[pval_col])
# Define significance categories
df["Significance"] = "Not Significant"
df.loc[(df["log2FoldChange"] > 1) & (df[pval_col] < 0.01), "Significance"] = "Upregulated"
df.loc[(df["log2FoldChange"] < -1) & (df[pval_col] < 0.01), "Significance"] = "Downregulated"

# Set color mapping
color_palette = {
    "Upregulated": "red",
    "Downregulated": "blue",
    "Not Significant": "gray"
}
# Create the scatter plot using Seaborn
plt.figure(figsize=(8,6))
sns.scatterplot(
    data=df,
    x="log2FoldChange",
    y="-log10(p-value)",
    hue="Significance",
    palette=color_palette,
    alpha=0.75
)
plt.title("Volcano Plot (p < 0.01)")
plt.xlabel("log2 Fold Change")
plt.ylabel("-log10(p-value)")
plt.legend()
plt.show()

# Filter the upregulated and downregulated genes
upregulated_genes = df[(df["log2FoldChange"] > 1) & (df[pval_col] < 0.01)]
downregulated_genes = df[(df["log2FoldChange"] < -1) & (df[pval_col] < 0.01)]
# Display the top 5 genes from each category
print("Top 5 Upregulated Genes:")
print(upregulated_genes.head())
print("\nTop 5 Downregulated Genes:")
print(downregulated_genes.head())

# Dictionary to store gene names and their functions
genes = {
    "Upregulated Genes": {
        "EMILIN2": "Enables extracellular matrix constituent conferring elasticity",
        "POU3F4": "RNA polymerase II transcription regulatory region sequence-specific DNA binding",
        "LOC285954": "Acts as a tumor suppressor in various cancers",
        "VEPH1": "Enables protein binding to interact with TGF-beta receptor type-1 (TGFBR1)",
        "DTHD1": "Enables protein binding"
    },
    "Downregulated Genes": {
        "TBX5": "RNA polymerase II transcription regulatory region sequence-specific DNA binding",
        "IFITM1": "Enables protein binding",
        "LAMA2": "Enables signaling receptor binding",
        "CAV2": "Enables protein binding",
        "TNN": "Enables integrin binding"
    }
}

# Function to display gene functions
def display_gene_functions():
    for category, gene_list in genes.items():
        print(f"\n{category}:")
        for gene, function in gene_list.items():
            print(f"{gene}: {function}")

# Run the function
display_gene_functions()
