# HackBio Internship - February 2025
# Team Arginine Python 
# This team has four members, viz:
# Abby (GitHub: @AbbyOlawal)
# Oluwaferanmi (GitHub: @oluwaferanmihq)
# Olumide (GitHub: @inyang352)
# Prashant (GitHub: @PrashantPhulpagar)
# Abby (GitHub: @AbbyOlawal) https://www.linkedin.com/in/abigael-edeh-b1a7a015a/
# Oluwaferanmi (GitHub: @oluwaferanmihq) https://www.linkedin.com/in/oluwaferanmiatolagbe/
# Olumide (GitHub: @inyang352) https://www.linkedin.com/in/olumide-inyang-73b224a1/
# Prashant (GitHub: @PrashantPhulpagar) https://www.linkedin.com/in/prashant-phulpagar-0025417a?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app
# GitHub link to team_arginine_python repository for stage 2
https://github.com/AbbyOlawal/Hackbio-biocoding-Internship/edit/main/Stage%202%20Task%20code%202.6
#link to the task videos
https://drive.google.com/file/d/1OzWlZ8SO5DJhzhWRv-Kmzgb5CF8n0xk7/view?usp=drivesdk


import pandas as pd
import numpy as np
import seaborn as sns

# Task 1: Generate a volcano plot
# Load dataset from the URL with space as the separator
data_source = "https://gist.githubusercontent.com/stephenturner/806e31fce55a8b7175af/raw/1a507c4c3f9f1baaa3a69187223ff3d3050628d4/results.txt"
df = pd.read_csv(data_source, sep=" ", engine="python")  # Use space separator and "python" engine to handle multiple spaces

# Inspect actual column names (DEBUGGING STEP)
print(df.columns)

# Ensure column names are stripped of spaces
df.columns = df.columns.str.strip()

# Check if 'pvalue' exists, otherwise try 'padj'
pval_col = 'pvalue' if 'pvalue' in df.columns else 'padj'  # Use adjusted p-value if needed

# Compute -log10(p-value) for visualization
df["-log10(p-value)"] = -np.log10(df[pval_col])

# Define significance categories (p-value < 0.01)
df["Significance"] = "Not Significant"
df.loc[(df["log2FoldChange"] > 1) & (df[pval_col] < 0.01), "Significance"] = "Upregulated"
df.loc[(df["log2FoldChange"] < -1) & (df[pval_col] < 0.01), "Significance"] = "Downregulated"

# Set color mapping
color_palette = {
"Upregulated": "red",
    "Downregulated": "blue",
    "Not Significant": "gray"
}

# Create the scatter plot using Seaborn
sns.scatterplot(
    data=df,
    x="log2FoldChange",
    y="-log10(p-value)",
    hue="Significance",
    palette=color_palette,
    alpha=0.75
).set(title="Volcano Plot (p < 0.01)")


# Task 2: Determine the upregulated genes (Genes with Log2FC > 1 and pvalue < 0.01)

import pandas as pd
# Load dataset from the URL with space as the separator
data_source = "https://gist.githubusercontent.com/stephenturner/806e31fce55a8b7175af/raw/1a507c4c3f9f1baaa3a69187223ff3d3050628d4/results.txt"

df = pd.read_csv(data_source, sep=" ", engine="python")
# Clean column names (in case there are spaces)
df.columns = df.columns.str.strip()
# Filter the upregulated genes (Log2FC > 1 and p-value < 0.01)
upregulated_genes = df[(df["log2FoldChange"] > 1) & (df["pvalue"] < 0.01)]
# Display the upregulated genes
print(upregulated_genes)

# Task 3: Determine the downregulated genes (Genes with Log2FC < -1 and pvalue < 0.01)

import pandas as pd

# Load dataset from the URL with space as the separator
data_source = "https://gist.githubusercontent.com/stephenturner/806e31fce55a8b7175af/raw/1a507c4c3f9f1baaa3a69187223ff3d3050628d4/results.txt"

df = pd.read_csv(data_source, sep=" ", engine="python")
# Clean column names (in case there are spaces)
df.columns = df.columns.str.strip()
# Filter the downregulated genes (Log2FC < -1 and p-value < 0.01)
downregulated_genes = df[(df["log2FoldChange"] < -1) & (df["pvalue"] < 0.01)]
# Display the downregulated genes
print(downregulated_genes)

# Task 4: Functions of the top 5 upregulated genes and top 5 downregulated genes
import requests
import pandas as pd

# List of genes to query (upregulated and downregulated genes)
genes = [
    "EMILIN2", "POU3F4", "LOC285954", "VEPH1", "DTHD1",
    "TBX5", "IFITM1", "LAMA2", "CAV2", "TNN"
]

# Function to get gene description from Ensembl API
def get_gene_info(gene_name):
    # Query the Ensembl REST API
    url = f"https://rest.ensembl.org/lookup/symbol/human/{gene_name}?content-type=application/json"
    response = requests.get(url)

    if response.status_code == 200:
        gene_data = response.json()
        # Extract the gene description (note that not all genes have descriptions)
        description = gene_data.get("description", "Description not available")
        return description
    else:
        return f"Error: {response.status_code}"

# Retrieve gene information
gene_info = {gene: get_gene_info(gene) for gene in genes}

# Create a DataFrame for better presentation
gene_df = pd.DataFrame(list(gene_info.items()), columns=["Gene", "Description"])

# Display the DataFrame
print(gene_df)
