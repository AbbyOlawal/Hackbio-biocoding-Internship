genetic_code = {
    'ATA': 'I', 'ATC': 'I', 'ATT': 'I', 'ATG': 'M',  # Methionine
    'ACA': 'T', 'ACC': 'T', 'ACG': 'T', 'ACT': 'T',
    'AAC': 'N', 'AAT': 'N', 'AAA': 'K', 'AAG': 'K',
    'AGC': 'S', 'AGT': 'S', 'AGA': 'R', 'AGG': 'R',
    'CTA': 'L', 'CTC': 'L', 'CTG': 'L', 'CTT': 'L',
    'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCT': 'P',
    'CAC': 'H', 'CAT': 'H', 'CAA': 'Q', 'CAG': 'Q',
    'CGA': 'R', 'CGC': 'R', 'CGG': 'R', 'CGT': 'R',
    'GTA': 'V', 'GTC': 'V', 'GTG': 'V', 'GTT': 'V',
    'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCT': 'A',
    'GAC': 'D', 'GAT': 'D', 'GAA': 'E', 'GAG': 'E',
    'GGA': 'G', 'GGC': 'G', 'GGG': 'G', 'GGT': 'G',
    'TCA': 'S', 'TCC': 'S', 'TCG': 'S', 'TCT': 'S',
    'TTC': 'F', 'TTT': 'F', 'TTA': 'L', 'TTG': 'L',
    'TAC': 'Y', 'TAT': 'Y', 'TAA': '*', 'TAG': '*',  # Stop codons
    'TGC': 'C', 'TGT': 'C', 'TGA': '*', 'TGG': 'W',
    'CTA': 'L', 'CTC': 'L', 'CTG': 'L', 'CTT': 'L'
}
def translate_dna_to_protein(dna_sequence):
    dna_sequence = dna_sequence.upper()
    protein_sequence = ""
    for i in range(0, len(dna_sequence), 3):
        codon = dna_sequence[i:i+3]
        if len(codon) == 3:
            amino_acid = genetic_code.get(codon, 'X')
            protein_sequence += amino_acid
    return protein_sequence
dna_sequence = "ATGGGCCTGGGAGGCGGCTGAGGAGGGAGGGCGAGGAGGAGGGGGGAGGAGG"
protein = translate_dna_to_protein(dna_sequence)
print(f"Translated Protein Sequence: {protein}")





import numpy as np
import matplotlib.pyplot as plt
import random
def simulate_logistic_growth(initial_population, carrying_capacity, growth_rate, time_steps, max_lag_phase, max_exp_phase):
    """
    Parameters:
    - initial_population: Initial population size of mosquitoes
    - carrying_capacity: Maximum population size the environment can sustain
    - growth_rate: Intrinsic rate of population growth
    - time_steps: Total number of time steps (e.g., days) to simulate
    - max_lag_phase: Maximum random length (in time units) for the lag phase
    - max_exp_phase: Maximum random length (in time units) for the exponential phase
    Returns:
    - time: Time points array
    - population: Simulated population size at each time point
    """
    lag_phase_length = random.randint(0, max_lag_phase) 
    exp_phase_length = random.randint(0, max_exp_phase)  
    population = np.zeros(time_steps)
    population[0] = initial_population
    for t in range(1, time_steps):
        if t < lag_phase_length:
            population[t] = population[0]  
        elif t < lag_phase_length + exp_phase_length:
            growth_rate_exp = growth_rate * 1.5  
            population[t] = population[t-1] + growth_rate_exp * population[t-1] * (1 - population[t-1]/carrying_capacity)
        else:
            population[t] = population[t-1] + growth_rate * population[t-1] * (1 - population[t-1]/carrying_capacity)
    return population
initial_population = 50
carrying_capacity = 1000
growth_rate = 0.1  # Intrinsic growth rate
time_steps = 100  # Simulate over 100 time units (e.g., days)
max_lag_phase = 20  # Max random length for lag phase
max_exp_phase = 30  # Max random length for exponential phase
population = simulate_logistic_growth(initial_population, carrying_capacity, growth_rate, time_steps, max_lag_phase, max_exp_phase)
time = np.arange(0, time_steps)
plt.figure(figsize=(10, 6))
plt.plot(time, population, label="Mosquito Population", color="b")
plt.title("Simulated Logistic Population Growth of Mosquitoes")
plt.xlabel("Time (days)")
plt.ylabel("Population Size")
plt.grid(True)
plt.legend()
plt.show() 



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
def simulate_logistic_growth(initial_population, carrying_capacity, growth_rate, time_steps, max_lag_phase, max_exp_phase):
    """
    Parameters:
    - initial_population: Initial population size of mosquitoes
    - carrying_capacity: Maximum population size the environment can sustain
    - growth_rate: Intrinsic rate of population growth
    - time_steps: Total number of time steps (e.g., days) to simulate
    - max_lag_phase: Maximum random length (in time units) for the lag phase
    - max_exp_phase: Maximum random length (in time units) for the exponential phase
    Returns:
    - population: Simulated population size at each time point
    """
    lag_phase_length = random.randint(0, max_lag_phase) 
    exp_phase_length = random.randint(0, max_exp_phase)  
    population = np.zeros(time_steps)
    population[0] = initial_population
    for t in range(1, time_steps):
        if t < lag_phase_length:
            population[t] = population[0]
        elif t < lag_phase_length + exp_phase_length:
            growth_rate_exp = growth_rate * 1.5  
            population[t] = population[t-1] + growth_rate_exp * population[t-1] * (1 - population[t-1] / carrying_capacity)
        else:
            population[t] = population[t-1] + growth_rate * population[t-1] * (1 - population[t-1] / carrying_capacity)
    return population
initial_population = 50
carrying_capacity = 1000
growth_rate = 0.1
time_steps = 100
max_lag_phase = 20
max_exp_phase = 30
num_curves = 100
growth_curves = []
for _ in range(num_curves):
    population = simulate_logistic_growth(initial_population, carrying_capacity, growth_rate, time_steps, max_lag_phase, max_exp_phase)
    growth_curves.append(population)
df_growth_curves = pd.DataFrame(growth_curves).transpose()
df_growth_curves.columns = [f"Curve_{i+1}" for i in range(num_curves)]
df_growth_curves['Time'] = np.arange(0, time_steps)
print(df_growth_curves.head())
plt.figure(figsize=(10, 6))
for i in range(5):  
    plt.plot(df_growth_curves['Time'], df_growth_curves[f'Curve_{i+1}'], label=f'Curve {i+1}')
plt.title("Simulated Logistic Population Growth of Mosquitoes (Sample Curves)")
plt.xlabel("Time (days)")
plt.ylabel("Population Size")
plt.legend()
plt.grid(True)
plt.show()




import numpy as np
import random
def time_to_reach_80_percent_capacity_mosquito(initial_population, carrying_capacity, growth_rate, time_steps, max_lag_phase, max_exp_phase):
    """
    Simulates logistic population growth for mosquitoes and returns the time when the population reaches 80% of the carrying capacity.
    Parameters:
    - initial_population: Initial population size of mosquitoes
    - carrying_capacity: Maximum population size the environment can sustain (carrying capacity)
    - growth_rate: Intrinsic rate of population growth
    - time_steps: Total number of time steps (e.g., days) to simulate
    - max_lag_phase: Maximum random length (in time units) for the lag phase
    - max_exp_phase: Maximum random length (in time units) for the exponential phase
    Returns:
    - time_to_80_percent: Time step when population first reaches or exceeds 80% of carrying capacity
    """
    lag_phase_length = random.randint(0, max_lag_phase) 
    exp_phase_length = random.randint(0, max_exp_phase)  
    population = np.zeros(time_steps)
    population[0] = initial_population
    for t in range(1, time_steps):
        if t < lag_phase_length:
            population[t] = population[0] 
        elif t < lag_phase_length + exp_phase_length:
            growth_rate_exp = growth_rate * 1.5 
            population[t] = population[t-1] + growth_rate_exp * population[t-1] * (1 - population[t-1] / carrying_capacity)
        else:
            population[t] = population[t-1] + growth_rate * population[t-1] * (1 - population[t-1] / carrying_capacity)
        if population[t] >= 0.8 * carrying_capacity:
            return t 
    return None 
initial_population = 50 
carrying_capacity = 1000 
growth_rate = 0.1 
time_steps = 100 
max_lag_phase = 20  
max_exp_phase = 30  
time_to_80_percent = time_to_reach_80_percent_capacity_mosquito(initial_population, carrying_capacity, growth_rate, time_steps, max_lag_phase, max_exp_phase)
if time_to_80_percent is not None:
    print(f"Time to reach 80% of the carrying capacity: {time_to_80_percent} time steps")
else:
    print("Population did not reach 80% of the carrying capacity within the given time steps.")





